package Yoorkin/rabbit-tea/browser

alias @Yoorkin/rabbit-tea/url as @url

// Values
fn back[M]() -> Command[M]

fn batch[M](Array[Command[M]]) -> Command[M]

fn forward[M]() -> Command[M]

fn load[M](String) -> Command[M]

fn none[M]() -> Command[M]

fn push_url[M](String) -> Command[M]

fn reload[M]() -> Command[M]

fn replace_url[M](String) -> Command[M]

fn scroll_by_pos[M](Int, Int) -> Command[M]

fn scroll_to[M](String) -> Command[M]

fn scroll_to_bottom[M]() -> Command[M]

fn scroll_to_pos[M](Int, Int) -> Command[M]

fn scroll_to_top[M]() -> Command[M]

fn task[M](M) -> Command[M]

// Types and methods
pub(all) type Command (PredefinedEvent, (M) -> Unit) -> Unit
impl Command {
  map[A, B](Self[A], (A) -> B) -> Self[B]
}

pub(all) struct PredefinedEvent {
  on_url_changed : (UrlRequest) -> Unit
  on_url_request : (UrlRequest) -> Unit
}

type Sandbox
impl Sandbox {
  launch[M, Model, View](Self[M, Model, View], Command[M]) -> Unit
  new[Model, Msg, View](Model, (Msg, Model) -> (Command[Msg], Model), (Model) -> View, after_update~ : (View) -> Unit, attach_to~ : String = .., url_changed? : (UrlRequest) -> Msg, url_request? : (UrlRequest) -> Msg) -> Self[Msg, Model, View]
  refersh[Msg, Model, View](Self[Msg, Model, View]) -> Unit
  update[Msg, Model, View](Self[Msg, Model, View], Msg) -> Unit
}

pub(all) enum UrlRequest {
  Internal(@url.Url)
  External(@url.Url)
}
impl Compare for UrlRequest
impl Eq for UrlRequest
impl Show for UrlRequest

// Type aliases

// Traits

