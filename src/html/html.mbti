package "Yoorkin/rabbit-tea/html"

import(
  "Yoorkin/rabbit-tea/dom"
  "Yoorkin/rabbit-tea/internal/vdom"
  "Yoorkin/rabbit-tea/variant"
)

// Values
fn[M] a(style~ : Array[String] = .., id? : String, class? : String, href~ : String, target~ : Target = .., Array[T[M]], escape~ : Bool = ..) -> T[M]

fn[Msg] attribute(String, String) -> Attribute[Msg]

fn[M] b(style~ : Array[String] = .., id? : String, class? : String, Array[T[M]]) -> T[M]

fn[M] blockquote(style~ : Array[String] = .., id? : String, class? : String, Array[T[M]]) -> T[M]

fn[M] br(style~ : Array[String] = .., id? : String, class? : String) -> T[M]

fn[M] button(style~ : Array[String] = .., id? : String, class? : String, click? : M, Array[T[M]]) -> T[M]

fn[M] caption(style~ : Array[String] = .., id? : String, class? : String, Array[T[M]]) -> T[M]

fn[M] code(style~ : Array[String] = .., id? : String, class? : String, Array[T[M]]) -> T[M]

fn[M] col(style~ : Array[String] = .., id? : String, span? : Int, class? : String, Array[T[M]]) -> T[M]

fn[M] colgroup(style~ : Array[String] = .., id? : String, span? : Int, class? : String, Array[T[M]]) -> T[M]

fn[M] dd(style~ : Array[String] = .., id? : String, class? : String, Array[T[M]]) -> T[M]

fn[M] dialog(style~ : Array[String] = .., id? : String, class? : String, open? : Bool, close? : (String) -> M, cancel? : M, Array[T[M]]) -> T[M]

fn[M] div(style~ : Array[String] = .., id? : String, class? : String, click? : M, Array[T[M]]) -> T[M]

fn[M] dl(style~ : Array[String] = .., id? : String, class? : String, Array[T[M]]) -> T[M]

fn[M] dt(style~ : Array[String] = .., id? : String, class? : String, Array[T[M]]) -> T[M]

fn[M] em(style~ : Array[String] = .., id? : String, class? : String, Array[T[M]]) -> T[M]

fn[Msg] external(@dom.Node, Ref[Array[Attribute[Msg]]?], width~ : Int, height~ : Int) -> T[Msg]

fn[M] form(style~ : Array[String] = .., id? : String, class? : String, action? : String, name? : String, Array[T[M]]) -> T[M]

fn[M] h1(style~ : Array[String] = .., id? : String, class? : String, Array[T[M]]) -> T[M]

fn[M] h2(style~ : Array[String] = .., id? : String, class? : String, Array[T[M]]) -> T[M]

fn[M] h3(style~ : Array[String] = .., id? : String, class? : String, Array[T[M]]) -> T[M]

fn[M] h4(style~ : Array[String] = .., id? : String, class? : String, Array[T[M]]) -> T[M]

fn[M] h5(style~ : Array[String] = .., id? : String, class? : String, Array[T[M]]) -> T[M]

fn[M] h6(style~ : Array[String] = .., id? : String, class? : String, Array[T[M]]) -> T[M]

fn[M] hr(style~ : Array[String] = .., id? : String, class? : String, childrens~ : Array[T[M]] = ..) -> T[M]

fn[Msg] href(String) -> Attribute[Msg]

fn[M] i(style~ : Array[String] = .., id? : String, class? : String, Array[T[M]]) -> T[M]

fn[M] iframe(style~ : Array[String] = .., id? : String, class? : String, src? : String, title? : String, width? : Int, height? : Int) -> T[M]

fn[M] img(style~ : Array[String] = .., id? : String, class? : String, src? : String, alt? : String, title? : String, width? : Int, height? : Int, border? : Int, Array[T[M]]) -> T[M]

fn[M] input(input_type~ : InputType = .., name? : String, value? : String, checked? : Bool, read_only? : Bool, multiple? : Bool, accept? : String, placeholder? : String, auto_complete? : AutoComplete, style~ : Array[String] = .., max? : Int, min? : Int, step? : Int, maxlength? : Int, minlength? : Int, pattern? : String, size? : Int, width? : Int, height? : Int, id? : String, class? : String, childrens~ : Array[T[M]] = .., change? : (String) -> M, input? : (String) -> M) -> T[M]

fn[M] label(style~ : Array[String] = .., id? : String, class? : String, for_? : String, Array[T[M]]) -> T[M]

fn[M] li(style~ : Array[String] = .., value? : Int, id? : String, class? : String, click? : M, Array[T[M]]) -> T[M]

fn[A, B] map(T[A], (A) -> B) -> T[B]

fn[Msg] node(String, Array[Attribute[Msg]], Array[T[Msg]]) -> T[Msg]

fn[M] nothing() -> T[M]

fn[M] ol(style~ : Array[String] = .., reversed? : Bool, start? : Int, id? : String, class? : String, Array[T[M]]) -> T[M]

fn[Msg] on_change((String) -> Msg) -> Attribute[Msg]

fn[Msg] on_click((Mouse) -> Msg) -> Attribute[Msg]

fn[Msg] on_double_click((Mouse) -> Msg) -> Attribute[Msg]

fn[Msg] on_input((String) -> Msg) -> Attribute[Msg]

fn[Msg] on_mouse_down((Mouse) -> Msg) -> Attribute[Msg]

fn[Msg] on_mouse_enter((Mouse) -> Msg) -> Attribute[Msg]

fn[Msg] on_mouse_leave((Mouse) -> Msg) -> Attribute[Msg]

fn[Msg] on_mouse_move((Mouse) -> Msg) -> Attribute[Msg]

fn[Msg] on_mouse_out((Mouse) -> Msg) -> Attribute[Msg]

fn[Msg] on_mouse_over((Mouse) -> Msg) -> Attribute[Msg]

fn[Msg] on_mouse_up((Mouse) -> Msg) -> Attribute[Msg]

fn[M] option(style~ : Array[String] = .., id? : String, class? : String, disabled? : Bool, value? : String, selected~ : Bool = .., Array[T[M]]) -> T[M]

fn[M] p(style~ : Array[String] = .., id? : String, class? : String, Array[T[M]]) -> T[M]

fn[M] pre(style~ : Array[String] = .., id? : String, class? : String, Array[T[M]]) -> T[M]

fn[M] property(String, @variant.Variant) -> Attribute[M]

fn[M] section(style~ : Array[String] = .., id? : String, class? : String, Array[T[M]]) -> T[M]

fn[M] select(style~ : Array[String] = .., id? : String, class? : String, disabled? : Bool, name? : String, change? : (String) -> M, Array[T[M]]) -> T[M]

fn[M] span(style~ : Array[String] = .., id? : String, class? : String, Array[T[M]]) -> T[M]

fn[M] strong(style~ : Array[String] = .., id? : String, class? : String, Array[T[M]]) -> T[M]

fn[Msg] style(String, String) -> Attribute[Msg]

fn[M] sub(style~ : Array[String] = .., id? : String, class? : String, Array[T[M]]) -> T[M]

fn[M] sup(style~ : Array[String] = .., id? : String, class? : String, Array[T[M]]) -> T[M]

fn[M] table(style~ : Array[String] = .., id? : String, class? : String, Array[T[M]]) -> T[M]

fn[Msg] target(Target) -> Attribute[Msg]

fn[M] tbody(style~ : Array[String] = .., id? : String, class? : String, Array[T[M]]) -> T[M]

fn[M] td(style~ : Array[String] = .., id? : String, colspan? : Int, rowspan? : Int, headers? : String, class? : String, Array[T[M]]) -> T[M]

fn[Msg] text(String) -> T[Msg]

fn[M] tfoot(style~ : Array[String] = .., id? : String, class? : String, Array[T[M]]) -> T[M]

fn[M] th(style~ : Array[String] = .., id? : String, abbr? : String, colspan? : Int, rowspan? : Int, headers? : String, scope? : Scope, class? : String, Array[T[M]]) -> T[M]

fn[M] thead(style~ : Array[String] = .., id? : String, class? : String, Array[T[M]]) -> T[M]

fn[Msg] to_virtual_dom(T[Msg]) -> @vdom.Node[Msg]

fn[M] tr(style~ : Array[String] = .., id? : String, class? : String, Array[T[M]]) -> T[M]

fn[M] u(style~ : Array[String] = .., id? : String, class? : String, Array[T[M]]) -> T[M]

fn[M] ul(style~ : Array[String] = .., id? : String, class? : String, click? : M, Array[T[M]]) -> T[M]

// Types and methods
type Attribute[Msg]

pub(all) enum AutoComplete {
  On
  Off
}

pub(all) enum InputType {
  Button
  Checkbox
  Color
  Date
  DateTimeLocal
  Email
  File
  Hidden
  Image
  Month
  Number
  Password
  Radio
  Range
  Reset
  Search
  Submit
  Tel
  Text
  Time
  Url
  Week
}

type Mouse
impl Mouse {
  client_pos(Self) -> Pos
  offset_pos(Self) -> Pos
  screen_pos(Self) -> Pos
}

pub(all) struct Pos {
  x : Int
  y : Int
}

pub(all) enum Scope {
  Row
  Col
  RowGroup
  ColGroup
}

type T[Msg]
impl T {
  map[A, B](Self[A], (A) -> B) -> Self[B]
  to_virtual_dom[Msg](Self[Msg]) -> @vdom.Node[Msg]
}

pub(all) enum Target {
  Self
  Blank
}

// Type aliases
pub typealias Html[Msg] = T[Msg]

// Traits

