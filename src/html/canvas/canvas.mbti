package "Yoorkin/rabbit-tea/html/canvas"

import(
  "Yoorkin/rabbit-tea/dom"
  "Yoorkin/rabbit-tea/html"
)

// Values
fn begin_path(Context2D) -> Unit

fn clear_rect(Context2D, Double, Double, Double, Double) -> Unit

fn context2d[Msg](Model[Msg]) -> Context2D

fn fill_rect(Context2D, Double, Double, Double, Double) -> Unit

fn fill_text(Context2D, String, Double, Double) -> Unit

fn line_to(Context2D, Double, Double) -> Unit

fn move_to(Context2D, Double, Double) -> Unit

fn new[Msg](width~ : Double, height~ : Double, click? : (@html.Mouse) -> Msg, mousemove? : (@html.Mouse) -> Msg, mousedown? : (@html.Mouse) -> Msg, mouseup? : (@html.Mouse) -> Msg, mouseenter? : (@html.Mouse) -> Msg, mouseleave? : (@html.Mouse) -> Msg) -> Model[Msg]

fn set_fill_style(Context2D, Color) -> Unit

fn set_line_width(Context2D, Double) -> Unit

fn set_stroke_style(Context2D, Color) -> Unit

fn stroke(Context2D) -> Unit

fn to_html[Msg](Model[Msg]) -> @html.T[Msg]

fn to_string(Color) -> String

fn to_unsafe_js(Context2D) -> @dom.CanvasRenderingContext2D

// Types and methods
pub(all) enum Color {
  RGB(Int, Int, Int)
  RGBA(Int, Int, Int, Int)
  Black
  White
}
impl Color {
  to_string(Self) -> String
}
impl Show for Color

type Context2D
impl Context2D {
  begin_path(Self) -> Unit
  clear_rect(Self, Double, Double, Double, Double) -> Unit
  fill_rect(Self, Double, Double, Double, Double) -> Unit
  fill_text(Self, String, Double, Double) -> Unit
  line_to(Self, Double, Double) -> Unit
  move_to(Self, Double, Double) -> Unit
  set_fill_style(Self, Color) -> Unit
  set_line_width(Self, Double) -> Unit
  set_stroke_style(Self, Color) -> Unit
  stroke(Self) -> Unit
  to_unsafe_js(Self) -> @dom.CanvasRenderingContext2D
}

type Model[Msg]
impl Model {
  context2d[Msg](Self[Msg]) -> Context2D
  to_html[Msg](Self[Msg]) -> @html.T[Msg]
}

// Type aliases

// Traits

