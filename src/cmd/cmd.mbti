package "Yoorkin/rabbit-tea/cmd"

import(
  "Yoorkin/rabbit-tea/url"
)

// Values
fn[A, E : Error, M] attempt((Result[A, E]) -> M, () -> A!E) -> Cmd[M]

fn[M] batch(Array[Cmd[M]]) -> Cmd[M]

fn[A, B] map(Cmd[A], (A) -> B) -> Cmd[B]

fn[M] none() -> Cmd[M]

fn[A, M] perform((A) -> M, () -> A) -> Cmd[M]

fn[M] task(M) -> Cmd[M]

// Types and methods
pub(all) type Cmd[M] (Events[M]) -> Unit
impl Cmd {
  map[A, B](Self[A], (A) -> B) -> Self[B]
}

type Events[M]
impl Events {
  new[M]((@url.Url) -> Unit, (@url.UrlRequest) -> Unit, (M) -> Unit) -> Self[M]
  trigger_update[M](Self[M], M) -> Unit
  trigger_url_changed[M](Self[M], @url.Url) -> Unit
  trigger_url_request[M](Self[M], @url.UrlRequest) -> Unit
}

// Type aliases
pub typealias Command[M] = Cmd[M]

// Traits

