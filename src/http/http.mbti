package "Yoorkin/rabbit-tea/http"

import(
  "Yoorkin/rabbit-tea/cmd"
)

// Values
fn delete[Msg, Model](String, expect~ : Expecting[Msg, Model]) -> @cmd.Cmd[Msg]

fn get[Msg, Model](String, expect~ : Expecting[Msg, Model]) -> @cmd.Cmd[Msg]

fn patch[Msg, Model](String, Body, expect~ : Expecting[Msg, Model]) -> @cmd.Cmd[Msg]

fn post[Msg, Model](String, Body, expect~ : Expecting[Msg, Model]) -> @cmd.Cmd[Msg]

// Types and methods
pub(all) enum Body {
  Json(Json)
  Text(String)
  Empty
}

pub(all) enum Expecting[Msg, Model] {
  Json((Result[Model, String]) -> Msg, (Json) -> Result[Model, String])
  Text((Result[String, String]) -> Msg)
}

// Type aliases
pub typealias Decoder[Model] = (Json) -> Result[Model, String]

// Traits

