package "Yoorkin/rabbit-tea/internal/vdom"

import(
  "Yoorkin/rabbit-tea/dom"
  "Yoorkin/rabbit-tea/internal/browser"
  "Yoorkin/rabbit-tea/variant"
  "rami3l/js-ffi/js"
)

// Values
fn[Msg] attribute(String, String) -> Attribute[Msg]

fn[Msg] diff(Node[Msg], Node[Msg]) -> Patch[Msg]

fn[Msg] diff_without_key(Array[Node[Msg]], Array[Node[Msg]]) -> Array[Patch[Msg]]

fn[Msg] do_diff(Node[Msg], Node[Msg]) -> Array[Patch[Msg]]

fn[Msg] external(@dom.Node, Ref[Array[Attribute[Msg]]?], width~ : Int, height~ : Int) -> Node[Msg]

fn[Msg] link(Array[Attribute[Msg]], Array[Node[Msg]], escape~ : Bool = ..) -> Node[Msg]

fn[A, B] map(Node[A], (A) -> B) -> Node[B]

fn[Msg] node(String, Array[Attribute[Msg]], Array[Node[Msg]]) -> Node[Msg]

fn[Msg] nothing() -> Node[Msg]

fn[Msg] on(String, Handler[Msg]) -> Attribute[Msg]

fn[Msg, Model, View] patch(Node[Msg], Node[Msg], @browser.Sandbox[Msg, Model, View], mount~ : String) -> Unit

fn[Msg] property(String, @variant.Variant) -> Attribute[Msg]

fn[Msg] style(String, String) -> Attribute[Msg]

fn[Msg] text(String) -> Node[Msg]

fn variant_to_js_value(@variant.Variant) -> @js.Value

// Types and methods
type Attribute[Msg]
impl Attribute {
  map[A, B](Self[A], (A) -> B) -> Self[B]
}

pub(all) enum Handler[Msg] {
  Normal(Msg)
  HandleEvent((@dom.Event) -> Msg)
  Custom(Msg, stop_propagation~ : Bool, prevent_default~ : Bool)
}
impl Handler {
  map[A, B](Self[A], (A) -> B) -> Self[B]
}

type Node[Msg]
impl Node {
  map[A, B](Self[A], (A) -> B) -> Self[B]
  patch[Msg, Model, View](Self[Msg], Self[Msg], @browser.Sandbox[Msg, Model, View], mount~ : String) -> Unit
}

type Patch[Msg]

// Type aliases

// Traits

