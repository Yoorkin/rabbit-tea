package Yoorkin/rabbit-tea/internal/vdom

alias @Yoorkin/rabbit-tea/browser as @browser
alias @Yoorkin/rabbit-tea/dom as @dom

// Values
fn attribute[Msg](String, String) -> Attribute[Msg]

fn diff[Msg](Node[Msg], Node[Msg]) -> Patch[Msg]

fn diff_without_key[Msg](Array[Node[Msg]], Array[Node[Msg]]) -> Array[Patch[Msg]]

fn do_diff[Msg](Node[Msg], Node[Msg]) -> Array[Patch[Msg]]

fn external[Msg](@dom.Node, Ref[Array[Attribute[Msg]]?], width~ : Int, height~ : Int) -> Node[Msg]

fn map[A, B](Node[A], (A) -> B) -> Node[B]

fn node[Msg](String, Array[Attribute[Msg]], Array[Node[Msg]]) -> Node[Msg]

fn nothing[Msg]() -> Node[Msg]

fn on[Msg](String, Handler[Msg]) -> Attribute[Msg]

fn patch[Msg, Model, View](Node[Msg], Node[Msg], @browser.Sandbox[Msg, Model, View], mount~ : String) -> Unit

fn property[Msg](String, String) -> Attribute[Msg]

fn style[Msg](String, String) -> Attribute[Msg]

fn text[Msg](String) -> Node[Msg]

// Types and methods
type Attribute[Msg]
impl Attribute {
  map[A, B](Self[A], (A) -> B) -> Self[B]
}

pub(all) enum Handler[Msg] {
  Normal(Msg)
  HandleEvent((@dom.Event) -> Msg)
  Custom(Msg, Bool, Bool)
}
impl Handler {
  map[A, B](Self[A], (A) -> B) -> Self[B]
}

type Node[Msg]
impl Node {
  map[A, B](Self[A], (A) -> B) -> Self[B]
  patch[Msg, Model, View](Self[Msg], Self[Msg], @browser.Sandbox[Msg, Model, View], mount~ : String) -> Unit
}

type Patch[Msg]

// Type aliases

// Traits

